1.3 Задание step 1
/*Отобрать различные (уникальные) элементы столбца amount таблицы book.
 */

THEORY:
Чтобы отобрать уникальные элементы некоторого столбца используется ключевое слово DISTINCT, которое размещается сразу после SELECT.

/*EXAMPLE:

Выбрать различных авторов, книги которых хранятся в таблице book.

Запрос:

SELECT DISTINCT author
FROM book;

Другой способ – использование оператора GROUP BY, который группирует данные при выборке, имеющие одинаковые значения в некотором столбце. Столбец, по которому осуществляется группировка, указывается после GROUP BY .

С помощью GROUP BY можно выбрать уникальные элементы столбца, по которому осуществляется группировка. Результат будет точно такой же как при использовании DISTINCT.

Запрос:

SELECT  author
FROM book
GROUP BY author;
*/


SOLUTION:
SELECT DISTINCT amount
FROM book;
	ИЛИ
SELECT amount
	FROM book
	GROUP BY amount;


1.3 Задание step 2
/*Отобрать различные (уникальные) элементы столбца amount таблицы book.
 */

THEORY:
Чтобы отобрать уникальные элементы некоторого столбца используется ключевое слово DISTINCT, которое размещается сразу после SELECT.

/*EXAMPLE:

Выбрать различных авторов, книги которых хранятся в таблице book.

Запрос:

SELECT DISTINCT author
FROM book;

Другой способ – использование оператора GROUP BY, который группирует данные при выборке, имеющие одинаковые значения в некотором столбце. Столбец, по которому осуществляется группировка, указывается после GROUP BY .

С помощью GROUP BY можно выбрать уникальные элементы столбца, по которому осуществляется группировка. Результат будет точно такой же как при использовании DISTINCT.

Запрос:

SELECT  author
FROM book
GROUP BY author;
*/


SOLUTION:
SELECT DISTINCT amount
FROM book;
	ИЛИ
SELECT amount
	FROM book
	GROUP BY amount;


1.3 Задание step 3
/*Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  
Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.
 */

THEORY:
При группировке над элементами столбца, входящими в группу можно выполнить различные действия, например, просуммировать их или найти количество элементов в группе.

Подробно рассмотрим, как осуществляется группировка данных по некоторому столбцу и вычисления над группой на следующем примере:

SELECT author, sum(amount), count(amount)
FROM book
GROUP BY author;


/*EXAMPLE:
Посчитать, сколько экземпляров книг каждого автора хранится на складе.

Запрос:

SELECT author, SUM(amount)
FROM book
GROUP BY author;


Посчитать, сколько различных книг каждого автора хранится на складе.

Только для этого примера в таблицу book добавлена запись с пустыми значениями в столбцах amount и price:

INSERT INTO book (title, author, price, amount) VALUES ('Черный человек','Есенин С.А.', Null, Null);

SELECT author, COUNT(author), COUNT(amount), COUNT(*)
FROM book
GROUP BY author;


Из таблицы с результатами запроса видно, что функцию COUNT() можно применять к любому столбцу, в том числе можно использовать и *, если таблица не 
содержит пустых значений. Если же в столбцах есть значения Null, (для группы по автору Есенин в нашем примере), то

COUNT(*) —  подсчитывает  все записи, относящиеся к группе, в том числе и со значением NULL;
COUNT(имя_столбца) — возвращает количество записей конкретного столбца (только NOT NULL), относящихся к группе.
*/


SOLUTION:
SELECT author AS "Автор", COUNT(title) AS "Различных_книг", SUM(amount) AS "Количество_экземпляров" 
FROM book
GROUP BY author;


1.3 Задание step 4
/*
Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  
Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.
 */

THEORY:
Выборка данных, групповые функции MIN, MAX и AVG
К групповым функциям SQL относятся: MIN(), MAX() и AVG(), которые вычисляют минимальное, максимальное и среднее значение элементов столбца, относящихся к группе.




/*
EXAMPLE:
Вывести минимальную цену книги каждого автора

Запрос:

SELECT author, MIN(price) AS min_price
FROM book
GROUP BY author;
*/


SOLUTION:
SELECT author, MIN(price) AS "Минимальная_цена", MAX(price) AS "Максимальная_цена", AVG(price) AS "Средняя_цена"
from book
GROUP BY author;


1.3 Задание step 5
/*
Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм
 (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. 
 Значения округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы:

 */

THEORY:
Выборка данных c вычислением, групповые функции
В качестве аргумента групповых функций  SQL может использоваться не только столбец, но и любое допустимое в SQL арифметическое выражение.


/*
EXAMPLE:
Вывести суммарную стоимость книг каждого автора.

Запрос:

SELECT author, SUM(price * amount) AS Стоимость
FROM book
GROUP BY author;
*/


SOLUTION:
SELECT author,
ROUND (SUM(price*amount),2) AS "Стоимость",
ROUND((SUM(price*amount)*0.18 / 1.18), 2) AS "НДС",
ROUND((SUM(price*amount) / 1.18), 2) AS "Стоимость_без_НДС"
FROM book
GROUP BY author;


1.3 Задание step 6
/*
Вывести  цену самой дешевой книги, цену самой дорогой и среднюю цену уникальных книг на складе. Названия столбцов Минимальная_цена, Максимальная_цена, 
Средняя_цена соответственно. Среднюю цену округлить до двух знаков после запятой.
 */

THEORY:
Вычисления по таблице целиком
Групповые функции позволяют вычислять итоговые значения по всей таблице. Например, можно посчитать общее количество книг на складе, вычислить суммарную
стоимость и пр. Для этого после ключевого слова SELECT указывается групповая функция для выражения или имени столбца, а ключевые слова GROUP BY опускаются.


/*
EXAMPLE:
Посчитать количество экземпляров книг на складе.

Запрос:

SELECT SUM(amount) AS Количество
FROM book;


Посчитать общее количество экземпляров книг на складе и их стоимость .

Запрос:

SELECT SUM(amount) AS Количество, 
    SUM(price * amount) AS Стоимость
FROM book;

*/


SOLUTION:
SELECT MIN(price) AS "Минимальная_цена",
MAX(price) AS "Максимальная_цена",
ROUND (AVG(price),2) AS "Средняя_цена"
from book;


1.3 Задание step 7
/*
Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. 
Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.
 */


THEORY:
Выборка данных по условию, групповые функции
В запросы с групповыми функциями можно включать условие отбора строк, которое в обычных запросах записывается после WHERE. 
В запросах с групповыми функциями вместо WHERE используется ключевое слово HAVING , которое размещается после оператора GROUP BY.


/*
Найти минимальную и максимальную цену книг всех авторов, общая стоимость книг которых больше 5000.

Запрос:

SELECT author,
    MIN(price) AS Минимальная_цена, 
    MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(price * amount) > 5000; 

Найти минимальную и максимальную цену книг всех авторов, общая стоимость книг которых больше 5000. Результат вывести по убыванию минимальной цены.

Запрос:

SELECT author,
    MIN(price) AS Минимальная_цена, 
    MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(price * amount) > 5000 
ORDER BY Минимальная_цена DESC;

*/


SOLUTION:
SELECT 
ROUND (AVG(price), 2) AS "Средняя_цена",
SUM(price*amount) AS "Стоимость"
FROM book
WHERE amount BETWEEN 5 AND 14;


1.3 Задание step 8
/*
Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых 
суммарная стоимость книг (без учета книг «Идиот» и «Белая гвардия») более 5000 руб. Вычисляемый столбец назвать Стоимость. Результат отсортировать 
по убыванию стоимости.
 */


THEORY:
Выборка данных по условию, групповые функции, WHERE и HAVING
Для этого урока теоретическая часть подготовлена Alexandra Klinnikova, спасибо большое!

WHERE и HAVING могут использоваться в одном запросе. При этом необходимо учитывать порядок выполнения  SQL запроса на выборку на СЕРВЕРЕ:

FROM
WHERE
GROUP BY
HAVING
SELECT
ORDER BY
Сначала определяется таблица, из которой выбираются данные (FROM), затем из этой таблицы отбираются записи в соответствии с условием  WHERE, 
выбранные данные агрегируются (GROUP BY),  из агрегированных записей выбираются те, которые удовлетворяют условию после HAVING. Потом формируются 
данные результирующей выборки, как это указано после SELECT ( вычисляются выражения, присваиваются имена и пр. ). Результирующая выборка сортируется, 
как указано после ORDER BY.

Важно! Порядок ВЫПОЛНЕНИЯ запросов - это не порядок ЗАПИСИ ключевых слов в запросе на выборку. Порядок записи (синтаксис запроса) остается таким же, 
как рассматривался ранее в курсе. Порядок ВЫПОЛНЕНИЯ  нужен для того, чтобы понять, почему, например, в WHERE нельзя использовать имена выражений из SELECT. 
Просто SELECT выполняется компилятором позже, чем WHERE, поэтому ему неизвестно, какое там выражение написано.


/*
Вывести максимальную и минимальную цену книг каждого автора, кроме Есенина, количество экземпляров книг которого больше 10. 

SELECT author,
    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена
FROM book
WHERE author <> 'Есенин С.А.'
GROUP BY author
HAVING SUM(amount) > 10;

Другим способом решения примера является запрос:

SELECT author,
    MIN(price) AS Минимальная_цена,
    MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(amount) > 10 AND author <> 'Есенин С.А.';
Не смотря на то что результат будет одинаковым, так делать не рекомендуется. «Потому что как написано - запрос сначала выбирает всех авторов, потом выводит
 данные, рассчитывая минимальное и максимальное значение цены для каждого, и только после всего убирает Есенина. Можно убрать Есенина в данном случае раньше 
 и не использовать ресурсы базы для расчета его минимального и максимального значения, как это сделано в первом варианте. На небольшой базе быстродействия 
 не ощутить, но если выполнять такое на продуктивной, то второй вариант значительно проигрывает...»
*/


SOLUTION:
SELECT author,
SUM(price*amount) AS "Стоимость"
FROM book
WHERE title <> "Идиот" AND title <> "Белая_гвардия"
GROUP BY author
HAVING SUM(price*amount) > 5000
ORDER BY SUM(price*amount) DESC;